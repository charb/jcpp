#include "namespaceInjection.h"
#include "fieldInjection.h"
#include "classInjection.h"
#include "variableInjection.h"
#ifndef SAMPLE1_H_
#define SAMPLE1_H_

#include "SampleParent.h"
#include "SampleParent2.h"

char* strGlobal1;DeclaredVariable(strGlobal1);
char* strGlobal2 = (char*) 0;DeclaredVariable(strGlobal2);

namespace helloNamespace {
	class UndefindedClass;
	char* strHelloGlobal = (char*) 0;DeclaredVariable(strHelloGlobal);
	namespace internal {
		char * internalHello = (char*) 0;DeclaredVariable(internalHello);
		namespace emptyns {
/*DeclaredNamespace(emptyns);*/
}
	
/*DeclaredNamespace(internal);*/
}

/*DeclaredNamespace(helloNamespace);*/
}

/*
 * @MetadataAnnotation(meta1="hello world", meta2="3", meta3="")
 * @AnotherMetadataAnnotation(meta1=hello world, meta2=3, meta3=)
 */
//@EmptyAnnotation()
class Sample1 : public SampleParent, SampleParent2 {
/*DeclaredClass(Sample1);*/

public:
	Sample1();
	virtual ~Sample1();

	void addValue(Sample1* object);
	// @MethodAnnotation(meta1=hello , meta2= "world")
	void addValue(Sample1* objectA, Sample1* objectB);
	Sample1* getCopy();

private:
	int value;/*DeclaredField(value);*/
	// @FieldAnnotation(meta1=hello , meta2= "world")
	char *strField;/*DeclaredField(strField);*/
	static char *strStaticField;/*DeclaredField(strStaticField);*/ 

};

namespace sampleNs {
	class Sample2 {
/*DeclaredClass(Sample2);*/

		public:
			Sample2();
			virtual ~Sample2();
			char* sayHello(char *strMessage);
		private:
			char *strInternal;/*DeclaredField(strInternal);*/
		public:
			class SampleChild {
/*DeclaredClass(SampleChild);*/

				public:
					SampleChild();
					virtual ~SampleChild();

					int childValue;/*DeclaredField(childValue);*/
			};
	};

/*DeclaredNamespace(sampleNs);*/
}

#endif
#include "endOfFile.h"
