#include "jcpp/lang/JCharacterData01.h"
#include <cassert>

namespace jcpp {
	namespace lang {

	JCharacterData01::JCharacterData01() : JCharacterData(getClazz()) {

	}

	jint JCharacterData01::getProperties(jint ch) {
		jchar offset =(jchar)ch;
		jint props = A->getInt((jint)(Y->getChar((X->getChar(offset>>5)<<4)|((offset>>1)&0xF))<<1)|(offset&0x1));
		return props;
	}

	jint JCharacterData01::getPropertiesEx(jint ch) {
		jchar offset = (jchar)ch;
		jint props = B->getChar((jint)(Y->getChar((jint)(X->getChar(offset>>5)<<4)|((offset>>1)&0xF))<<1)|(offset&0x1));
		return props;
	}

	jint JCharacterData01::getType(jint ch) {
		jint props = getProperties(ch);
		return (props & 0x1F);
	}

	jbool JCharacterData01::isOtherLowercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0001) != 0;
	}

	jbool JCharacterData01::isOtherUppercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0002) != 0;
	}

	jbool JCharacterData01::isOtherAlphabetic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0004) != 0;
	}

	jbool JCharacterData01::isIdeographic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0010) != 0;
	}

	jbool JCharacterData01::isJavaIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) >= 0x00005000);
	}

	jbool JCharacterData01::isJavaIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00003000) != 0);
	}

	jbool JCharacterData01::isUnicodeIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00007000);
	}

	jbool JCharacterData01::isUnicodeIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00001000) != 0);
	}

	jbool JCharacterData01::isIdentifierIgnorable(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00001000);
	}

	jint JCharacterData01::toLowerCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00020000) != 0) {
			jint offset = val << 5 >> (5+18);
			mapChar = ch + offset;
		}
		return mapChar;
	}

	jint JCharacterData01::toUpperCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00010000) != 0) {
			jint offset = val  << 5 >> (5+18);
			mapChar = ch - offset;
		}
		return mapChar;
	}

	jint JCharacterData01::toTitleCase(jint ch) {
		jint mapChar= ch;
		jint val = getProperties(ch);

		if ((val & 0x00008000) != 0) {
			if ((val & 0x00010000) == 0) {
				mapChar = ch + 1;
			}
			else if ((val & 0x00020000) == 0) {
				mapChar = ch - 1;
			}
		}
		else if ((val & 0x00010000) != 0) {
			mapChar = toUpperCase(ch);
		}
		return mapChar;
	}

	jint JCharacterData01::digit(jint ch, jint radix) {
		jint value = -1;
		if (radix >= JCharacter::MIN_RADIX && radix <= JCharacter::MAX_RADIX) {
			jint val = getProperties(ch);
			jint kind = val & 0x1F;
			if (kind == JCharacter::DECIMAL_DIGIT_NUMBER) {
				value = ch + ((val & 0x3E0) >> 5) & 0x1F;
			}
			else if ((val & 0xC00) == 0x00000C00) {
				value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
			}
		}
		return (value < radix) ? value : -1;
	}

	jint JCharacterData01::getNumericValue(jint ch) {
		jint val = getProperties(ch);
		jint retval = -1;

		switch (val & 0xC00) {
		default:
		case (0x00000000):
			retval = -1;
			break;
		case (0x00000400):
			retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
			break;
		case (0x00000800):
		switch(ch) {
			case 0x10113: retval = 40; break;      // AEGEAN NUMBER FORTY
			case 0x10114: retval = 50; break;      // AEGEAN NUMBER FIFTY
			case 0x10115: retval = 60; break;      // AEGEAN NUMBER SIXTY
			case 0x10116: retval = 70; break;      // AEGEAN NUMBER SEVENTY
			case 0x10117: retval = 80; break;      // AEGEAN NUMBER EIGHTY
			case 0x10118: retval = 90; break;      // AEGEAN NUMBER NINETY
			case 0x10119: retval = 100; break;     // AEGEAN NUMBER ONE HUNDRED
			case 0x1011A: retval = 200; break;     // AEGEAN NUMBER TWO HUNDRED
			case 0x1011B: retval = 300; break;     // AEGEAN NUMBER THREE HUNDRED
			case 0x1011C: retval = 400; break;     // AEGEAN NUMBER FOUR HUNDRED
			case 0x1011D: retval = 500; break;     // AEGEAN NUMBER FIVE HUNDRED
			case 0x1011E: retval = 600; break;     // AEGEAN NUMBER SIX HUNDRED
			case 0x1011F: retval = 700; break;     // AEGEAN NUMBER SEVEN HUNDRED
			case 0x10120: retval = 800; break;     // AEGEAN NUMBER EIGHT HUNDRED
			case 0x10121: retval = 900; break;     // AEGEAN NUMBER NINE HUNDRED
			case 0x10122: retval = 1000; break;    // AEGEAN NUMBER ONE THOUSAND
			case 0x10123: retval = 2000; break;    // AEGEAN NUMBER TWO THOUSAND
			case 0x10124: retval = 3000; break;    // AEGEAN NUMBER THREE THOUSAND
			case 0x10125: retval = 4000; break;    // AEGEAN NUMBER FOUR THOUSAND
			case 0x10126: retval = 5000; break;    // AEGEAN NUMBER FIVE THOUSAND
			case 0x10127: retval = 6000; break;    // AEGEAN NUMBER SIX THOUSAND
			case 0x10128: retval = 7000; break;    // AEGEAN NUMBER SEVEN THOUSAND
			case 0x10129: retval = 8000; break;    // AEGEAN NUMBER EIGHT THOUSAND
			case 0x1012A: retval = 9000; break;    // AEGEAN NUMBER NINE THOUSAND
			case 0x1012B: retval = 10000; break;   // AEGEAN NUMBER TEN THOUSAND
			case 0x1012C: retval = 20000; break;   // AEGEAN NUMBER TWENTY THOUSAND
			case 0x1012D: retval = 30000; break;   // AEGEAN NUMBER THIRTY THOUSAND
			case 0x1012E: retval = 40000; break;   // AEGEAN NUMBER FORTY THOUSAND
			case 0x1012F: retval = 50000; break;   // AEGEAN NUMBER FIFTY THOUSAND
			case 0x10130: retval = 60000; break;   // AEGEAN NUMBER SIXTY THOUSAND
			case 0x10131: retval = 70000; break;   // AEGEAN NUMBER SEVENTY THOUSAND
			case 0x10132: retval = 80000; break;   // AEGEAN NUMBER EIGHTY THOUSAND
			case 0x10133: retval = 90000; break;   // AEGEAN NUMBER NINETY THOUSAND
			case 0x10323: retval = 50; break;      // OLD ITALIC NUMERAL FIFTY

			case 0x010144: retval = 50; break;     // ACROPHONIC ATTIC FIFTY
			case 0x010145: retval = 500; break;    // ACROPHONIC ATTIC FIVE HUNDRED
			case 0x010146: retval = 5000; break;   // ACROPHONIC ATTIC FIVE THOUSAND
			case 0x010147: retval = 50000; break;  // ACROPHONIC ATTIC FIFTY THOUSAND
			case 0x01014A: retval = 50; break;     // ACROPHONIC ATTIC FIFTY TALENTS
			case 0x01014B: retval = 100; break;    // ACROPHONIC ATTIC ONE HUNDRED TALENTS
			case 0x01014C: retval = 500; break;    // ACROPHONIC ATTIC FIVE HUNDRED TALENTS
			case 0x01014D: retval = 1000; break;   // ACROPHONIC ATTIC ONE THOUSAND TALENTS
			case 0x01014E: retval = 5000; break;   // ACROPHONIC ATTIC FIVE THOUSAND TALENTS
			case 0x010151: retval = 50; break;     // ACROPHONIC ATTIC FIFTY STATERS
			case 0x010152: retval = 100; break;    // ACROPHONIC ATTIC ONE HUNDRED STATERS
			case 0x010153: retval = 500; break;    // ACROPHONIC ATTIC FIVE HUNDRED STATERS
			case 0x010154: retval = 1000; break;   // ACROPHONIC ATTIC ONE THOUSAND STATERS
			case 0x010155: retval = 10000; break;  // ACROPHONIC ATTIC TEN THOUSAND STATERS
			case 0x010156: retval = 50000; break;  // ACROPHONIC ATTIC FIFTY THOUSAND STATERS
			case 0x010166: retval = 50; break;     // ACROPHONIC TROEZENIAN FIFTY
			case 0x010167: retval = 50; break;     // ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM
			case 0x010168: retval = 50; break;     // ACROPHONIC HERMIONIAN FIFTY
			case 0x010169: retval = 50; break;     // ACROPHONIC THESPIAN FIFTY
			case 0x01016A: retval = 100; break;    // ACROPHONIC THESPIAN ONE HUNDRED
			case 0x01016B: retval = 300; break;    // ACROPHONIC THESPIAN THREE HUNDRED
			case 0x01016C: retval = 500; break;    // ACROPHONIC EPIDAUREAN FIVE HUNDRED
			case 0x01016D: retval = 500; break;    // ACROPHONIC TROEZENIAN FIVE HUNDRED
			case 0x01016E: retval = 500; break;    // ACROPHONIC THESPIAN FIVE HUNDRED
			case 0x01016F: retval = 500; break;    // ACROPHONIC CARYSTIAN FIVE HUNDRED
			case 0x010170: retval = 500; break;    // ACROPHONIC NAXIAN FIVE HUNDRED
			case 0x010171: retval = 1000; break;   // ACROPHONIC THESPIAN ONE THOUSAND
			case 0x010172: retval = 5000; break;   // ACROPHONIC THESPIAN FIVE THOUSAND
			case 0x010174: retval = 50; break;     // ACROPHONIC STRATIAN FIFTY MNAS
			case 0x010341: retval = 90; break;     // GOTHIC LETTER NINETY
			case 0x01034A: retval = 900; break;    // GOTHIC LETTER NINE HUNDRED
			case 0x0103D5: retval = 100; break;    // OLD PERSIAN NUMBER HUNDRED
			case 0x01085D: retval = 100; break;    // IMPERIAL ARAMAIC NUMBER ONE HUNDRED
			case 0x01085E: retval = 1000; break;   // IMPERIAL ARAMAIC NUMBER ONE THOUSAND
			case 0x01085F: retval = 10000; break;  // IMPERIAL ARAMAIC NUMBER TEN THOUSAND
			case 0x010919: retval = 100; break;    // PHOENICIAN NUMBER ONE HUNDRED
			case 0x010A46: retval = 100; break;    // KHAROSHTHI NUMBER ONE HUNDRED
			case 0x010A47: retval = 1000; break;   // KHAROSHTHI NUMBER ONE THOUSAND
			case 0x010A7E: retval = 50; break;     // OLD SOUTH ARABIAN NUMBER FIFTY
			case 0x010B5E: retval = 100; break;    // INSCRIPTIONAL PARTHIAN NUMBER ONE HUNDRED
			case 0x010B5F: retval = 1000; break;   // INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND
			case 0x010B7E: retval = 100; break;    // INSCRIPTIONAL PAHLAVI NUMBER ONE HUNDRED
			case 0x010B7F: retval = 1000; break;   // INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND
			case 0x010E6C: retval = 40; break;     // RUMI NUMBER FORTY
			case 0x010E6D: retval = 50; break;     // RUMI NUMBER FIFTY
			case 0x010E6E: retval = 60; break;     // RUMI NUMBER SIXTY
			case 0x010E6F: retval = 70; break;     // RUMI NUMBER SEVENTY
			case 0x010E70: retval = 80; break;     // RUMI NUMBER EIGHTY
			case 0x010E71: retval = 90; break;     // RUMI NUMBER NINETY
			case 0x010E72: retval = 100; break;    // RUMI NUMBER ONE HUNDRED
			case 0x010E73: retval = 200; break;    // RUMI NUMBER TWO HUNDRED
			case 0x010E74: retval = 300; break;    // RUMI NUMBER THREE HUNDRED
			case 0x010E75: retval = 400; break;    // RUMI NUMBER FOUR HUNDRED
			case 0x010E76: retval = 500; break;    // RUMI NUMBER FIVE HUNDRED
			case 0x010E77: retval = 600; break;    // RUMI NUMBER SIX HUNDRED
			case 0x010E78: retval = 700; break;    // RUMI NUMBER SEVEN HUNDRED
			case 0x010E79: retval = 800; break;    // RUMI NUMBER EIGHT HUNDRED
			case 0x010E7A: retval = 900; break;    // RUMI NUMBER NINE HUNDRED
			case 0x01105E: retval = 40; break;     // BRAHMI NUMBER FORTY
			case 0x01105F: retval = 50; break;     // BRAHMI NUMBER FIFTY
			case 0x011060: retval = 60; break;     // BRAHMI NUMBER SIXTY
			case 0x011061: retval = 70; break;     // BRAHMI NUMBER SEVENTY
			case 0x011062: retval = 80; break;     // BRAHMI NUMBER EIGHTY
			case 0x011063: retval = 90; break;     // BRAHMI NUMBER NINETY
			case 0x011064: retval = 100; break;    // BRAHMI NUMBER ONE HUNDRED
			case 0x011065: retval = 1000; break;   // BRAHMI NUMBER ONE THOUSAND
			case 0x01D36C: retval = 40; break;     // COUNTING ROD TENS DIGIT FOUR
			case 0x01D36D: retval = 50; break;     // COUNTING ROD TENS DIGIT FIVE
			case 0x01D36E: retval = 60; break;     // COUNTING ROD TENS DIGIT SIX
			case 0x01D36F: retval = 70; break;     // COUNTING ROD TENS DIGIT SEVEN
			case 0x01D370: retval = 80; break;     // COUNTING ROD TENS DIGIT EIGHT
			case 0x01D371: retval = 90; break;     // COUNTING ROD TENS DIGIT NINE
			default: retval = -2; break;
			}

			break;
			case (0x00000C00):
				retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
				break;
			}
		return retval;
	}

	jbool JCharacterData01::isWhitespace(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00004000);
	}

	jbyte JCharacterData01::getDirectionality(jint ch) {
		jint val = getProperties(ch);
		jbyte directionality = (jbyte)((val & 0x78000000) >> 27);
		if (directionality == 0xF) {
			directionality = JCharacter::DIRECTIONALITY_UNDEFINED;
		}
		return directionality;
	}

	jbool JCharacterData01::isMirrored(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x80000000) != 0);
	}

	JCharacterData* JCharacterData01::instance = new JCharacterData01();

	JPrimitiveCharArray* JCharacterData01::initX() {
		jchar Xbuf[] = {0000, 0001, 0002, 0003, 0004, 0004, 0004, 0005, 0006, 0007, 0010, 0011, 0012, 0003, 0013, 0014, 0003, 0003, 0003, 0003,
				0015, 0004, 0016, 0003, 0017, 0020, 0021, 0003, 0022, 0004, 0023, 0003, 0024, 0025, 0026, 0004, 0027, 0030, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0031, 0032, 0033, 0003, 0003, 0003, 0003, 0003, 0034, 0035, 0003, 0003, 0003, 0003, 0003, 0003,
				0036, 0037, 0040, 0041, 0003, 0003, 0003, 0003, 0042, 0043, 0044, 0045, 0003, 0003, 0003, 0003, 0042, 0042, 0046, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0047, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0050, 0051, 0052, 0053, 0054, 0055, 0056, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0004, 0004, 0004, 0004,
				0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004,
				0004, 0004, 0004, 0057, 0003, 0003, 0003, 0003, 0060, 0061, 0062, 0063, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004,
				0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0057, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004,
				0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0064, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0065, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0066, 0066, 0066, 0066, 0066, 0066, 0066, 0067, 0066, 0070, 0066, 0071, 0072, 0073, 0074, 0003,
				0075, 0075, 0076, 0003, 0003, 0003, 0003, 0003, 0075, 0075, 0077, 0100, 0003, 0003, 0003, 0003, 0101, 0102, 0103, 0104,
				0105, 0106, 0107, 0110, 0111, 0112, 0113, 0114, 0115, 0101, 0102, 0116, 0104, 0117, 0120, 0121, 0110, 0122, 0123, 0124,
				0125, 0126, 0127, 0130, 0131, 0132, 0133, 0134, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0075, 0135, 0075, 0075, 0136, 0137, 0140, 0003, 0141, 0142, 0066, 0143, 0144, 0003, 0003, 0145, 0146, 0144, 0147, 0003,
				0003, 0003, 0003, 0003, 0075, 0150, 0075, 0151, 0136, 0075, 0152, 0153, 0075, 0154, 0155, 0075, 0156, 0075, 0075, 0157,
				0075, 0160, 0161, 0162, 0003, 0003, 0003, 0163, 0164, 0165, 0166, 0003, 0075, 0075, 0167, 0003, 0075, 0075, 0075, 0136,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0x003};
		return new JPrimitiveCharArray(2048, Xbuf);
	}

	JPrimitiveCharArray* JCharacterData01::initY() {
		jchar Ybuf[] = {0000, 0000, 0000, 0000, 0000, 0000, 0001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002, 0000, 0001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0003,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002, 0003, 0003, 0004, 0005, 0003, 0006,
				0007, 0007, 0007, 0007, 0010, 0011, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012, 0012,
				0012, 0012, 0003, 0013, 0014, 0014, 0014, 0014, 0015, 0016, 0015, 0015, 0017, 0015, 0015, 0020, 0021, 0015, 0015, 0022,
				0023, 0024, 0025, 0026, 0027, 0030, 0031, 0015, 0015, 0015, 0015, 0015, 0015, 0032, 0033, 0034, 0035, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0037, 0003, 0003, 0036, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0040, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0002, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002, 0041, 0042, 0003, 0003,
				0003, 0003, 0003, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0043, 0000, 0000, 0000, 0000, 0044, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0045, 0000, 0000, 0003, 0003, 0000, 0000, 0000, 0000, 0046, 0047, 0050, 0003, 0003, 0003, 0003, 0003,
				0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051, 0051,
				0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052, 0052,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0003, 0053, 0053, 0053, 0053, 0053, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0054, 0054, 0054, 0003, 0055, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0054, 0054, 0054, 0054, 0054, 0054, 0056, 0055, 0003, 0055, 0056, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0054, 0054, 0057, 0060, 0061, 0062, 0063, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0064,
				0065, 0066, 0003, 0067, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0003, 0003, 0057,
				0070, 0071, 0072, 0073, 0003, 0003, 0071, 0071, 0054, 0054, 0056, 0054, 0056, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0054, 0054, 0054, 0054, 0054, 0003, 0003, 0074, 0075, 0003, 0076, 0077, 0077, 0100, 0063, 0003, 0003, 0003, 0003,
				0101, 0101, 0101, 0101, 0102, 0003, 0003, 0003, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0054, 0103, 0104, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0003, 0067, 0105, 0105, 0105, 0054, 0054, 0054, 0054,
				0054, 0054, 0054, 0054, 0054, 0054, 0054, 0003, 0060, 0060, 0106, 0063, 0054, 0054, 0054, 0054, 0054, 0054, 0054, 0054,
				0054, 0055, 0003, 0003, 0060, 0060, 0106, 0063, 0054, 0054, 0054, 0054, 0055, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0107, 0107, 0107, 0107, 0107, 0110, 0111, 0111, 0111, 0111, 0111, 0111, 0111, 0111, 0111, 0112,
				0113, 0114, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0071, 0071, 0071, 0071, 0071, 0071, 0071, 0115, 0116, 0116, 0116, 0003,
				0003, 0117, 0117, 0117, 0117, 0117, 0120, 0034, 0034, 0034, 0034, 0121, 0121, 0121, 0121, 0121, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0074, 0114, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0122, 0113, 0071, 0123, 0124, 0115, 0125, 0116, 0116, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0002,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0126, 0126, 0126, 0126, 0127, 0127, 0127, 0130, 0131, 0131, 0132, 0133,
				0133, 0133, 0133, 0134, 0134, 0135, 0136, 0137, 0137, 0137, 0131, 0140, 0141, 0142, 0143, 0144, 0133, 0145, 0146, 0147,
				0150, 0151, 0152, 0153, 0154, 0155, 0155, 0156, 0157, 0160, 0161, 0142, 0162, 0163, 0163, 0163, 0163, 0044, 0003, 0003,
				0003, 0003, 0003, 0003, 0116, 0116, 0003, 0003, 0003, 0003, 0003, 0003, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0002, 0003, 0003, 0003, 0000, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0003, 0003, 0003, 0003, 0003, 0014, 0014, 0014, 0005,
				0013, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0164, 0165, 0074, 0014, 0164, 0166,
				0166, 0167, 0170, 0170, 0170, 0171, 0074, 0074, 0074, 0172, 0040, 0074, 0074, 0074, 0014, 0014, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0074, 0074, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0003, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0074, 0173, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0174,
				0003, 0003, 0003, 0003, 0175, 0175, 0175, 0175, 0175, 0176, 0012, 0012, 0012, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0200, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200,
				0200, 0200, 0201, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177,
				0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0202, 0177,
				0003, 0202, 0203, 0202, 0203, 0177, 0202, 0177, 0177, 0177, 0177, 0200, 0200, 0204, 0204, 0200, 0200, 0200, 0204, 0200,
				0200, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0177, 0203, 0177, 0202, 0203, 0177, 0177, 0177, 0202, 0177,
				0177, 0177, 0202, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0177, 0203, 0177, 0202,
				0177, 0177, 0202, 0202, 0003, 0177, 0177, 0177, 0202, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200,
				0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0177, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0177, 0177,
				0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0200, 0200, 0200, 0003, 0177, 0177, 0177, 0177,
				0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0205, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200,
				0200, 0206, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0205, 0200, 0200,
				0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0206, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177,
				0177, 0177, 0177, 0177, 0177, 0177, 0205, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0206,
				0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0205, 0200, 0200, 0200, 0200,
				0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0206, 0200, 0200, 0200, 0177, 0177, 0177, 0177, 0177, 0177, 0177, 0177,
				0177, 0177, 0177, 0177, 0205, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0200, 0206, 0200, 0200,
				0200, 0207, 0003, 0210, 0210, 0210, 0210, 0210, 0211, 0211, 0211, 0211, 0211, 0212, 0212, 0212, 0212, 0212, 0213, 0213,
				0213, 0213, 0213, 0214, 0214, 0214, 0214, 0214, 0036, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0003, 0003, 0003, 0003,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0174, 0215, 0036, 0036, 0036, 0036, 0036, 0036, 0174, 0215, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0215, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0216, 0217, 0217, 0217, 0217, 0220, 0003, 0003,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0005, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0003, 0003, 0003, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0005, 0003, 0003, 0003, 0003, 0003, 0014,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0005, 0003, 0003, 0003, 0003, 0003, 0003,
				0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0014, 0005, 0003, 0003, 0003, 0014, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0174, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0036, 0036, 0036, 0215, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0174, 0003, 0036, 0036, 0174, 0036,
				0036, 0174, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036,
				0174, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0174, 0174, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0221, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0215, 0036, 0174, 0003, 0036, 0036, 0221, 0036, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0036, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0215, 0036, 0036, 0215, 0036, 0036, 0036,
				0036, 0036, 0036, 0036, 0174, 0036, 0174, 0174, 0174, 0174, 0036, 0174, 0036, 0036, 0036, 0003, 0036, 0036, 0215, 0003,
				0036, 0036, 0215, 0036, 0036, 0036, 0036, 0036, 0174, 0003, 0215, 0036, 0036, 0036, 0036, 0036, 0003, 0003, 0003, 0003,
				0003, 0003, 0003, 0003, 0036, 0036, 0036, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0003, 0x003};
		return new JPrimitiveCharArray(1920, Ybuf);
	}

	JString* JCharacterData01::initA_DATA() {
		jchar A_DATAbuf[] = {0000, 0x7005, 0000, 0x7005, 0x7800, 0000, 0000, 0x7005, 0000, 0x7005, 0x7800, 0000, 0x7800, 0000, 0x7800, 0000, 0000, 0030, 0x6800, 0030,
				0000, 0034, 0x7800, 0000, 0x7800, 0000, 0000, 0x074B, 0000, 0x074B, 0000, 0x074B, 0000, 0x074B, 0000, 0x046B, 0000, 0x058B, 0000, 0x080B,
				0000, 0x080B, 0000, 0x080B, 0x7800, 0000, 0000, 0034, 0000, 0034, 0000, 0034, 0x6800, 0x780A, 0x6800, 0x780A, 0x6800, 0x77EA, 0x6800, 0x744A,
				0x6800, 0x77AA, 0x6800, 0x742A, 0x6800, 0x780A, 0x6800, 0x76CA, 0x6800, 0x774A, 0x6800, 0x780A, 0x6800, 0x780A, 0x6800, 0x766A, 0x6800, 0x752A, 0x6800, 0x750A,
				0x6800, 0x74EA, 0x6800, 0x74EA, 0x6800, 0x74CA, 0x6800, 0x74AA, 0x6800, 0x748A, 0x6800, 0x74CA, 0x6800, 0x754A, 0x6800, 0x752A, 0x6800, 0x750A, 0x6800, 0x74EA,
				0x6800, 0x74CA, 0x6800, 0x772A, 0x6800, 0x780A, 0x6800, 0x764A, 0x6800, 0x780A, 0x6800, 0x080B, 0x6800, 0x080B, 0x6800, 0x080B, 0x6800, 0x080B, 0x6800, 0034,
				0x6800, 0034, 0x6800, 0034, 0x6800, 0x06CB, 0x7800, 0000, 0000, 0034, 0x4000, 0x3006, 0000, 0x042B, 0000, 0x048B, 0000, 0x050B, 0000, 0x080B,
				0000, 0x7005, 0000, 0x780A, 0000, 0x780A, 0x7800, 0000, 0x7800, 0000, 0000, 0030, 0000, 0030, 0000, 0x760A, 0000, 0x760A, 0000, 0x76EA,
				0000, 0x740A, 0000, 0x780A, 0242, 0x7001, 0242, 0x7001, 0241, 0x7002, 0241, 0x7002, 0000, 0x3409, 0000, 0x3409, 0x0800, 0x7005, 0x0800, 0x7005,
				0x0800, 0x7005, 0x7800, 0000, 0x7800, 0000, 0x0800, 0x7005, 0x7800, 0000, 0x0800, 0030, 0x0800, 0x052B, 0x0800, 0x052B, 0x0800, 0x052B, 0x0800, 0x05EB,
				0x0800, 0x070B, 0x0800, 0x080B, 0x0800, 0x080B, 0x0800, 0x080B, 0x0800, 0x056B, 0x0800, 0x066B, 0x0800, 0x078B, 0x0800, 0x080B, 0x0800, 0x050B, 0x0800, 0x050B,
				0x7800, 0000, 0x6800, 0030, 0x0800, 0x7005, 0x4000, 0x3006, 0x4000, 0x3006, 0x4000, 0x3006, 0x7800, 0000, 0x4000, 0x3006, 0x4000, 0x3006, 0x7800, 0000,
				0x4000, 0x3006, 0x4000, 0x3006, 0x4000, 0x3006, 0x7800, 0000, 0x7800, 0000, 0x4000, 0x3006, 0x0800, 0x042B, 0x0800, 0x042B, 0x0800, 0x04CB, 0x0800, 0x05EB,
				0x0800, 0030, 0x0800, 0030, 0x0800, 0030, 0x7800, 0000, 0x0800, 0x7005, 0x0800, 0x048B, 0x0800, 0x080B, 0x0800, 0030, 0x6800, 0030, 0x6800, 0030,
				0x0800, 0x05CB, 0x0800, 0x06EB, 0x3000, 0x042B, 0x3000, 0x042B, 0x3000, 0x054B, 0x3000, 0x066B, 0x3000, 0x080B, 0x3000, 0x080B, 0x3000, 0x080B, 0x7800, 0000,
				0000, 0x3008, 0x4000, 0x3006, 0000, 0x3008, 0000, 0x7005, 0x4000, 0x3006, 0000, 0030, 0000, 0030, 0000, 0030, 0x6800, 0x05EB, 0x6800, 0x05EB,
				0x6800, 0x070B, 0x6800, 0x042B, 0000, 0x3749, 0000, 0x3749, 0000, 0x3008, 0000, 0x3008, 0x4000, 0x3006, 0000, 0x3008, 0000, 0x3008, 0x4000, 0x3006,
				0000, 0030, 0000, 0x1010, 0000, 0x744A, 0000, 0x744A, 0000, 0x776A, 0000, 0x776A, 0000, 0x776A, 0000, 0x76AA, 0000, 0x76AA, 0000, 0x76AA,
				0000, 0x76AA, 0000, 0x758A, 0000, 0x758A, 0000, 0x758A, 0000, 0x746A, 0000, 0x746A, 0000, 0x746A, 0000, 0x77EA, 0000, 0x77EA, 0000, 0x77CA,
				0000, 0x77CA, 0000, 0x77CA, 0000, 0x76AA, 0000, 0x768A, 0000, 0x768A, 0000, 0x768A, 0000, 0x700A, 0000, 0x700A, 0000, 0x75AA, 0000, 0x75AA,
				0000, 0x75AA, 0000, 0x758A, 0000, 0x752A, 0000, 0x750A, 0000, 0x750A, 0000, 0x74EA, 0000, 0x74CA, 0000, 0x74AA, 0000, 0x74CA, 0000, 0x74CA,
				0000, 0x74AA, 0000, 0x748A, 0000, 0x748A, 0000, 0x746A, 0000, 0x746A, 0000, 0x744A, 0000, 0x742A, 0000, 0x740A, 0000, 0x770A, 0000, 0x770A,
				0000, 0x770A, 0000, 0x764A, 0000, 0x764A, 0000, 0x764A, 0000, 0x764A, 0000, 0x762A, 0000, 0x762A, 0000, 0x760A, 0000, 0x752A, 0000, 0x752A,
				0000, 0x780A, 0000, 0x780A, 0000, 0034, 0000, 0x3008, 0000, 0x3008, 0x4000, 0x3006, 0000, 0x3008, 0000, 0x3008, 0000, 0x3008, 0x4800, 0x1010,
				0x4800, 0x1010, 0x4800, 0x1010, 0x4800, 0x1010, 0x4000, 0x3006, 0x4000, 0x3006, 0000, 0034, 0x4000, 0x3006, 0x6800, 0034, 0x6800, 0034, 0x7800, 0000,
				0000, 0x042B, 0000, 0x042B, 0000, 0x054B, 0000, 0x066B, 0000, 0x7001, 0000, 0x7001, 0000, 0x7002, 0000, 0x7002, 0000, 0x7002, 0x7800, 0000,
				0000, 0x7001, 0x7800, 0000, 0x7800, 0000, 0000, 0x7001, 0x7800, 0000, 0000, 0x7002, 0000, 0x7001, 0000, 0031, 0000, 0x7002, 0xE800, 0031,
				0000, 0x7001, 0000, 0x7002, 0x1800, 0x3649, 0x1800, 0x3649, 0x1800, 0x3509, 0x1800, 0x3509, 0x1800, 0x37C9, 0x1800, 0x37C9, 0x1800, 0x3689, 0x1800, 0x3689,
				0x1800, 0x3549, 0x1800, 0x3549, 0x7800, 0000, 0x6800, 0034, 0x1800, 0x040B, 0x1800, 0x07EB, 0x1800, 0x07EB, 0x1800, 0x07EB, 0x1800, 0x07EB, 0x7800, 0000,
				0000, 0034, 0x6800, 0x034};
		return new JString(new JPrimitiveCharArray(584, A_DATAbuf));
	}

	JPrimitiveCharArray* JCharacterData01::initB() {
		jchar Bbuf[] = {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0004, 0004, 0004, 0000, 0004, 0004, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0004, 0004, 0004, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0004, 0004, 0004, 0004, 0004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000,
				0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0x000};
		return new JPrimitiveCharArray(292, Bbuf);
	}

	JString* JCharacterData01::A_DATA = JCharacterData01::initA_DATA();

	JPrimitiveCharArray* JCharacterData01::X = JCharacterData01::initX();

	JPrimitiveCharArray* JCharacterData01::Y = JCharacterData01::initY();

	JPrimitiveCharArray* JCharacterData01::B = JCharacterData01::initB();

	JPrimitiveIntArray* JCharacterData01::A = initA();

	JPrimitiveIntArray* JCharacterData01::initA() {

		JPrimitiveCharArray* data = A_DATA->toCharArray();
		assert(data->size() == (292*2));
		A = new JPrimitiveIntArray(292);
		jint i = 0, j = 0;
		while (i < (292 * 2)) {
			jint entry = data->getChar(i++) << 16;
			A->setInt(j++, entry | data->getChar(i++));
		}
		return A;
	}




	}
}
