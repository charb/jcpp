#include "jcpp/lang/JCharacterData0E.h"
#include <cassert>

namespace jcpp {
	namespace lang {

	jint JCharacterData0E::getProperties(jint ch) {
		jchar offset = (jchar)ch;
		jint props = A->getInt(Y->getChar(X->getChar(offset>>5)|((offset>>1)&0xF))|(offset&0x1));
		return props;
	}

	jint JCharacterData0E::getPropertiesEx(jint ch) {
		jchar offset = (jchar)ch;
		jint props = B->getChar(Y->getChar(X->getChar(offset>>5)|((offset>>1)&0xF))|(offset&0x1));
		return props;
	}

	jbool JCharacterData0E::isOtherLowercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0001) != 0;
	}

	jbool JCharacterData0E::isOtherUppercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0002) != 0;
	}

	jbool JCharacterData0E::isOtherAlphabetic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0004) != 0;
	}

	jbool JCharacterData0E::isIdeographic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0010) != 0;
	}

	jint JCharacterData0E::getType(jint ch) {
		jint props = getProperties(ch);
		return (props & 0x1F);
	}

	jbool JCharacterData0E::isJavaIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) >= 0x00005000);
	}

	jbool JCharacterData0E::isJavaIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00003000) != 0);
	}

	jbool JCharacterData0E::isUnicodeIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00007000);
	}

	jbool JCharacterData0E::isUnicodeIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00001000) != 0);
	}

	jbool JCharacterData0E::isIdentifierIgnorable(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00001000);
	}

	jint JCharacterData0E::toLowerCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00020000) != 0) {
			jint offset = val << 5 >> (5+18);
			mapChar = ch + offset;
		}
		return mapChar;
	}

	jint JCharacterData0E::toUpperCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00010000) != 0) {
			jint offset = val  << 5 >> (5+18);
			mapChar =  ch - offset;
		}
		return mapChar;
	}

	jint JCharacterData0E::toTitleCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00008000) != 0) {
			if ((val & 0x00010000) == 0) {
				mapChar = ch + 1;
			}
			else if ((val & 0x00020000) == 0) {
				mapChar = ch - 1;
			}
		}
		else if ((val & 0x00010000) != 0) {
			mapChar = toUpperCase(ch);
		}
		return mapChar;
	}

	jint JCharacterData0E::digit(jint ch, jint radix) {
		jint value = -1;
		if (radix >= JCharacter::MIN_RADIX && radix <= JCharacter::MAX_RADIX) {
			jint val = getProperties(ch);
			jint kind = val & 0x1F;
			if (kind == JCharacter::DECIMAL_DIGIT_NUMBER) {
				value = ch + ((val & 0x3E0) >> 5) & 0x1F;
			}
			else if ((val & 0xC00) == 0x00000C00) {
				value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
			}
		}
		return (value < radix) ? value : -1;
	}

	jint JCharacterData0E::getNumericValue(jint ch) {
		jint val = getProperties(ch);
		jint retval = -1;

		 switch (val & 0xC00) {
		 default:
		 case (0x00000000):         // not numeric
		 	 retval = -1;
		 	 break;
		 case (0x00000400):              // simple numeric
			retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
		 	 break;
		 case (0x00000800)      :       // "strange" numeric
			retval = -2;
		 	break;
		 case (0x00000C00):           // Java supradecimal
			retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
		 	break;
		 }
		 return retval;
	}

	jbool JCharacterData0E::isWhitespace(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00004000);
	}

	jbyte JCharacterData0E::getDirectionality(jint ch) {
		jint val = getProperties(ch);
		jbyte directionality = (jbyte)((val & 0x78000000) >> 27);
		if (directionality == 0xF) {
			directionality = JCharacter::DIRECTIONALITY_UNDEFINED;
		}
		return directionality;
	}

	jbool JCharacterData0E::isMirrored(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x80000000) != 0);
	}

	JCharacterData* JCharacterData0E::instance = new JCharacterData0E();

	JCharacterData0E::JCharacterData0E() : JCharacterData(getClazz()) {
	}

	JPrimitiveCharArray* JCharacterData0E::initX() {
		jchar Xbuf[] = {0000, 0020, 0020, 0020, 0040, 0040, 0040, 0040, 0060, 0060, 0060, 0060, 0060, 0060, 0060, 0100, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040, 0040,
				0040, 0040, 0040, 0040, 0040, 0040, 0040, 0x040};
		return new JPrimitiveCharArray(2048, Xbuf);
	}

	JPrimitiveCharArray* JCharacterData0E::initY() {
		jchar Ybuf[] = {0000, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0004, 0004, 0004, 0004,
				0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0004, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002,
				0002, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006,
				0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0006, 0002, 0002, 0002, 0002, 0002, 0002, 0002, 0x002};
		return new JPrimitiveCharArray(80, Ybuf);
	}

	JString* JCharacterData0E::initA_DATA() {
		jchar A_DATAbuf[] = {0x7800, 0000, 0x4800, 0x1010, 0x7800, 0000, 0x7800, 0000, 0x4800, 0x1010, 0x4800, 0x1010, 0x4000, 0x3006, 0x4000, 0x3006};
		return new JString(new JPrimitiveCharArray(16, A_DATAbuf));
	}

	JPrimitiveCharArray* JCharacterData0E::initB() {
		jchar Bbuf[] = {0000, 0000, 0000, 0000, 0000, 0000, 0000, 0x000};
		return new JPrimitiveCharArray(8, Bbuf);
	}

	JPrimitiveIntArray* JCharacterData0E::initA() {
		JPrimitiveCharArray* data = A_DATA->toCharArray();
		assert(data->size() == (8 * 2));
		jint i = 0, j = 0;
		A = new JPrimitiveIntArray(8);
		while (i < (8 * 2)) {
			jint entry = data->getChar(i++) << 16;
			A->setInt(j++, entry | data->getChar(i++));
		}
		return A;
	}

	JString* JCharacterData0E::A_DATA = JCharacterData0E::initA_DATA();

	JPrimitiveCharArray* JCharacterData0E::X = JCharacterData0E::initX();

	JPrimitiveCharArray* JCharacterData0E::Y = JCharacterData0E::initY();

	JPrimitiveCharArray* JCharacterData0E::B = JCharacterData0E::initB();

	JPrimitiveIntArray* JCharacterData0E::A = JCharacterData0E::initA();

	}
}

