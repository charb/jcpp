#include "jcpp/lang/JCharacterDataLatin1.h"
#include <cassert>

namespace jcpp {
	namespace lang {

	jint JCharacterDataLatin1::getProperties(jint ch) {
		jchar offset = (jchar)ch;
		jint props = A->getInt(offset);
		return props;
	}

	jint JCharacterDataLatin1::getPropertiesEx(jint ch) {
		jchar offset = (jchar)ch;
		jint props = B->getChar(offset);
		return props;
	}

	jbool JCharacterDataLatin1::isOtherLowercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0001) != 0;
	}

	jbool JCharacterDataLatin1::isOtherUppercase(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0002) != 0;
	}

	jbool JCharacterDataLatin1::isOtherAlphabetic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0004) != 0;
	}

	jbool JCharacterDataLatin1::isIdeographic(jint ch) {
		jint props = getPropertiesEx(ch);
		return (props & 0x0010) != 0;
	}

	jint JCharacterDataLatin1::getType(jint ch) {
		jint props = getProperties(ch);
		return (props & 0x1F);
	}

	jbool JCharacterDataLatin1::isJavaIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) >= 0x00005000);
	}

	jbool JCharacterDataLatin1::isJavaIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00003000) != 0);
	}

	jbool JCharacterDataLatin1::isUnicodeIdentifierStart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00007000);
	}

	jbool JCharacterDataLatin1::isUnicodeIdentifierPart(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00001000) != 0);
	}

	jbool JCharacterDataLatin1::isIdentifierIgnorable(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00001000);
	}

	jint JCharacterDataLatin1::toLowerCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		 if (((val & 0x00020000) != 0) &&  ((val & 0x07FC0000) != 0x07FC0000)) {
			 jint offset = val << 5 >> (5+18);
			 mapChar = ch + offset;
		 }
		 return mapChar;
	}

	jint JCharacterDataLatin1::toUpperCase(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00010000) != 0) {
			if ((val & 0x07FC0000) != 0x07FC0000) {
				jint offset = val << 5 >> (5+18);
				mapChar = ch - offset;
			} else if (ch == 0x00B5) {
				mapChar = 0x039C;
			}
		}
		return mapChar;
	}

	jint JCharacterDataLatin1::toTitleCase(jint ch) {
		return toUpperCase(ch);
	}

	jint JCharacterDataLatin1::digit(jint ch, jint radix) {
		jint value = -1;
		if (radix >= JCharacter::MIN_RADIX && radix <= JCharacter::MAX_RADIX) {
			jint val = getProperties(ch);
			jint kind = val & 0x1F;
			if (kind == JCharacter::DECIMAL_DIGIT_NUMBER) {
				value = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
			}
		}
		return (value < radix)? value : -1;
	}

	jint JCharacterDataLatin1::getNumericValue(jint ch) {
		jint val = getProperties(ch);
		jint retval = -1;

		switch(val && 0xC00) {
		default:
		case 0x00000000:
			retval = -1;
			break;
		case 0x00000400:
			retval = ch + ((val & 0x3E0) >> 5) & 0x1F;
			break;
		case 0x00000800:
			retval = -2;
			break;
		case 0x00000C00:
			retval = (ch + ((val & 0x3E0) >> 5) & 0x1F) + 10;
			break;
		}
		return retval;
	}

	jbool JCharacterDataLatin1::isWhitespace(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x00007000) == 0x00004000);
	}

	jbyte JCharacterDataLatin1::getDirectionality(jint ch) {
		jint val = getProperties(ch);
		jbyte directionality = (jbyte)((val & 0x78000000) >> 27);

		if (directionality == 0xF) {
			directionality = -1;
		}
		return directionality;
	}

	jbool JCharacterDataLatin1::isMirrored(jint ch) {
		jint props = getProperties(ch);
		return ((props & 0x80000000) != 0);
	}

	jint JCharacterDataLatin1::toUpperCaseEx(jint ch) {
		jint mapChar = ch;
		jint val = getProperties(ch);

		if ((val & 0x00010000) != 0) {
			if ((val & 0x07FC0000) != 0x07FC0000) {
				jint offset = val << 5 >> (5+18);
				mapChar = ch - offset;
			} else {
				switch(ch) {
				case 0x00B5: mapChar = 0x039C; break;
				default: mapChar = JCharacter::ERROR; break;
				}
			}
		}
		return mapChar;
	}

	JPrimitiveCharArray* JCharacterDataLatin1::sharpsMap = JCharacterDataLatin1::initSharpsMap();

	JPrimitiveCharArray* JCharacterDataLatin1::initSharpsMap() {
		JPrimitiveCharArray* A = new JPrimitiveCharArray(2);
		A->setChar(0, 'S');
		A->setChar(1, 'S');
		return A;
	}

	JPrimitiveCharArray* JCharacterDataLatin1::toUpperCaseCharArray(jint ch) {
		JPrimitiveCharArray* upperMap = new JPrimitiveCharArray(1);
		upperMap->setChar(0,ch);
		if (ch == 0x00DF) {
			upperMap = sharpsMap;
		}
		return upperMap;
	}

	JCharacterDataLatin1* JCharacterDataLatin1::instance = new JCharacterDataLatin1();

	JCharacterDataLatin1::JCharacterDataLatin1() : JCharacterData(getClazz()) {
	}

	JString* JCharacterDataLatin1::initA_DATA() {
		jchar A_DATAbuf[] = {0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x5800, 0x400F, 0x5000, 0x400F, 0x5800, 0x400F, 0x6000, 0x400F, 0x5000, 0x400F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x5000, 0x400F, 0x5000, 0x400F, 0x5000, 0x400F, 0x5800, 0x400F, 0x6000, 0x400C, 0x6800, 0030, 0x6800, 0030, 0x2800, 0030, 0x2800, 0x601A, 0x2800, 0030, 0x6800, 0030, 0x6800, 0030, 0xE800, 0025, 0xE800, 0026, 0x6800, 0030, 0x2800, 0031, 0x3800, 0030, 0x2800, 0024, 0x3800, 0030, 0x2000, 0030, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x1800, 0x3609, 0x3800, 0030, 0x6800, 0030, 0xE800, 0031, 0x6800, 0031, 0xE800, 0031, 0x6800, 0030, 0x6800, 0030, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0202, 0x7FE1, 0xE800, 0025, 0x6800, 0030, 0xE800, 0026, 0x6800, 0033, 0x6800, 0x5017, 0x6800, 0033, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0201, 0x7FE2, 0xE800, 0025, 0x6800, 0031, 0xE800, 0026, 0x6800, 0031, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x5000, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x4800, 0x100F, 0x3800, 0014, 0x6800, 0030, 0x2800, 0x601A, 0x2800, 0x601A, 0x2800, 0x601A, 0x2800, 0x601A, 0x6800, 0034, 0x6800, 0034, 0x6800, 0033, 0x6800, 0034, 0000, 0x7002, 0xE800, 0035, 0x6800, 0031, 0x6800, 0x1010, 0x6800, 0034, 0x6800, 0033, 0x2800, 0034, 0x2800, 0031, 0x1800, 0x060B, 0x1800, 0x060B, 0x6800, 0033, 0x07FD, 0x7002, 0x6800, 0034, 0x6800, 0030, 0x6800, 0033, 0x1800, 0x050B, 0000, 0x7002, 0xE800, 0036, 0x6800, 0x080B, 0x6800, 0x080B, 0x6800, 0x080B, 0x6800, 0030, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0x6800, 0031, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0202, 0x7001, 0x07FD, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0x6800, 0031, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0201, 0x7002, 0x061D, 0x7002};
		return new JString(new JPrimitiveCharArray(512, A_DATAbuf));
	}

	JPrimitiveCharArray* JCharacterDataLatin1::initB() {
		jchar Bbuf[] = {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
				0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
		return new JPrimitiveCharArray(256, Bbuf);
	}

	JPrimitiveIntArray* JCharacterDataLatin1::initA() {
		JPrimitiveCharArray* data = A_DATA->toCharArray();
		assert(data->size() == (256*2));
		jint i = 0, j = 0;
		JPrimitiveIntArray* A = new JPrimitiveIntArray(256*2);
		while (i < (256*2)) {
			jint entry = data->getChar(i++) << 16;
			A->setInt(j++, entry | data->getChar(i++));
		}
		return A;
	}

	JString* JCharacterDataLatin1::A_DATA = JCharacterDataLatin1::initA_DATA();

	JPrimitiveCharArray* JCharacterDataLatin1::B = JCharacterDataLatin1::initB();

	JPrimitiveIntArray* JCharacterDataLatin1::A = JCharacterDataLatin1::initA();

	}
}
